package main

import (
	"aoc2021/helper"
	"fmt"
	"math"
	"os"
	"strconv"
)

func algNum(c helper.Coord, data map[helper.Coord]bool) (int, error) {
	neighbours := c.GetOrderedSquare()

	s := ""
	for _, neighbour := range neighbours {
		if v, ok := data[neighbour]; !ok {
			s += "0"
		} else {
			if v {
				s += "1"
			} else {
				s += "0"
			}
		}
	}
	if len(s) != 9 {
		return 0, fmt.Errorf("Bad algorithm conversion")
	}
	num, _ := strconv.ParseInt(s, 2, 64)
	return int(num), nil
}

func getRangeOfPoint(c helper.Coord, data map[helper.Coord]bool) (minx,miny,maxx,maxy int) {
	minx = math.MaxInt32
	miny = math.MaxInt32
	maxx = math.MinInt32
	maxy = math.MinInt32

	mx,my,xmx,xmy := getRanges(data)
	for x := mx; x <= xmx; x++ {
		cc := helper.Coord{X:x, Y:c.Y}
		if data[cc] {
			if cc.X < minx {
				minx = cc.X
			}
			if cc.X > maxx {
				maxx = cc.X
			}
		}
	}
	for y := my; y <= xmy; y++ {
		cc := helper.Coord{X:c.X, Y:y}
		if data[cc] {
			if cc.Y < miny {
				miny = cc.Y
			}
			if cc.Y > maxy {
				maxy = cc.Y
			}
		}
	}
	return minx,miny,maxx,maxy
}

func problem(algorithm []bool, data map[helper.Coord]bool) (int, error) {

	indata := make(map[helper.Coord]bool)
	for k, v := range data {
		if k.X == 0 && k.Y == 0 {
			fmt.Println("-=-=-==-")
		}
		indata[k] = v
	}

	nx := helper.Coord{0,0}
	if _, ok := indata[nx]; ok {
		fmt.Println("START GOOD")
	}


	for i := 0; i < 1; i++ {
		//addBorder(&data)
		//printMap(data)
		copymap := make(map[helper.Coord]bool)
		mx,my,mxm,mxy := getRanges(indata)

		fmt.Printf("Ranges: %v,%v,%v,%v\n",mx,my,mxm,mxy)
		for x := mx-1; x <= mxm+1; x++ {
			for y := my-1; y <= mxy+1; y++ {
				nx := helper.Coord{0,0}
				if _, ok := indata[nx]; ok {
					fmt.Println("START GOOD")
				} else {
					fmt.Println("BAD BAD")
				}

				var arg int
				c := helper.Coord{x,y}
				for _, xx := range []int{x - 1, x, x + 1} {
					for _, yy := range []int{y - 1, y, y + 1} {
						//neighbours := c.GetOrderedSquare()
						//for _, neighbour := range neighbours {
						neighbour := helper.Coord{xx,yy}
							arg = arg << 1
							if v, ok := indata[neighbour]; ok {
								if x == 0 && y == -1 {
									fmt.Printf("OK HERE %v,%v -> ",xx,yy)
								}
								if v {
									if x == 0 && y == -1 {
										fmt.Printf("TRUE -> \n")
									}
									arg |= 1
								}
							} else {
								if x == 0 && y == -1 {
									fmt.Printf("BAD HERE %v,%v -> ",xx,yy)
								}
								if i % 2 == 1 {
									if x == 0 && y == -1 {
										fmt.Printf("TRUE ->")
									}
									arg |= 1
								}
							}
						//}
					}
				}

				fmt.Printf("Arg is %v,%v,%v\n",arg,x,y)
				if algorithm[arg] {
					fmt.Printf("Setting true for %v,%v,%v\n",arg,x,y)
				}
				//fmt.Printf("Arg for %v,%v:%v\n", x, y, arg)
				copymap[c] = algorithm[arg]
				fmt.Println("next time")
				nx = helper.Coord{0,0}
				if _, ok := indata[nx]; ok {
					fmt.Println("START GOOD 2 ")
				} else {
					fmt.Println("BAD BAD 2")
				}
			}
			fmt.Printf("aaaaaaaaaa\n")

			indata = make(map[helper.Coord]bool, 0)
			for k, v := range copymap {
				if k.X == 0 && k.Y == 0 {
					fmt.Println("*******")
				}

				indata[k] = v
			}
		}

		//addBorder(&data)
		//printMap(data)
		//copymap := make(map[helper.Coord]bool)
		//for coord, _ := range data {
		//	// get min/max x y ranges for this point
		//	lightnum, err := algNum(coord, data)
		//	if err != nil {
		//		return 0, err
		//	}
		//	pmx, pmy, pxmx, pxmy := getRangeOfPoint(coord, data)
		//	if lightnum == 0 {
		//		if coord.X < pmx || coord.X > pxmx || coord.Y < pmy || coord.Y > pxmy {
		//			//fmt.Printf("Ignoring coord: %v\n", coord)
		//			continue
		//		}
		//	}
		//	if lightnum >= len(algorithm) {
		//		return 0, fmt.Errorf("Bad algorithm lookup")
		//	}
		//	copymap[coord] = algorithm[lightnum]
		//}
		//
		//for k, v := range copymap {
		//	data[k] = v
		//}
	}
	//printMap(data)

	totalLit := 0
	for _, v := range indata {
		if v {
			totalLit++
		}
	}
	return totalLit, nil
}

func readData(lines []string) map[helper.Coord]bool {
	r := make(map[helper.Coord]bool, len(lines))

	for y, line := range lines {
		for x, c := range line {
			coord := helper.Coord{X: y, Y: x}
			if c == '#' {
				r[coord] = true
			} else {
				r[coord] = false
			}
		}
	}
	return r
}

func addBorder(data *map[helper.Coord]bool) {
	//newCoords := make([]helper.Coord, 0)
	//
	//for k, v := range *data {
	//	if v {
	//		neighbours := k.GetOrderedSquare()
	//		for _, n := range neighbours {
	//			if _, ok := (*data)[n]; !ok {
	//				newCoords = append(newCoords, n)
	//			}
	//		}
	//	}
	//}
	//for _, n := range newCoords {
	//	(*data)[n] = false
	//}
	mx,my,xmx,xmy := getRanges(*data)
	for y := my-1; y <= xmy+1; y++ {
		for x := mx-1; x <= xmx+1; x++ {
			c := helper.Coord{X: x, Y: y}
			if _, ok := (*data)[c]; !ok {
				(*data)[c] = false
			}
		}
	}
}

func getRanges(data map[helper.Coord]bool) (minx,miny,maxx,maxy int) {
	minx = math.MaxInt32
	miny = math.MaxInt32
	maxx = math.MinInt32
	maxy = math.MinInt32
	for k, v := range data {
		if !v {
			continue
		}
		if k.X < minx {
			minx = k.X
		}
		if k.X > maxx {
			maxx = k.X
		}
		if k.Y < miny {
			miny = k.Y
		}
		if k.Y > maxy {
			maxy = k.Y
		}
	}
	return minx, miny, maxx, maxy
}

func printMap(data map[helper.Coord]bool) {
	mx,my,xmx,xmy := getRanges(data)
	for y := my; y <= xmy; y++ {
		for x := mx; x <= xmx; x++ {
			c := helper.Coord{X:x, Y:y}
			if v, ok := data[c]; ok {
				if v {
					fmt.Printf("#")
				} else {
					fmt.Printf(".")
				}
			} else {
				fmt.Printf(".")
			}
		}
		fmt.Println("")
	}
	fmt.Println("")

}

func readAlgorithm(line string) []bool {
	r := make([]bool,len(line))
	for x, c := range line {
		if c == '#' {
			r[x] = true
		} else {
			r[x] = false
		}
	}
	return r
}

func main() {
	fh, _ := os.Open("input.txt")
	lines, err := helper.ReadLines(fh, true)
	if err != nil {
		fmt.Printf("Unable to read input: %v\n", err)
		return
	}

	algorithm := readAlgorithm(lines[0])
	data := readData(lines[1:])
	ans, err := problem(algorithm, data)
	fmt.Printf("Part one: %v\n", ans)
}
